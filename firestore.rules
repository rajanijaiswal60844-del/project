/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and their associated files.
 *  Projects, labels, and chat messages are publicly readable but only modifiable by authenticated users.
 *  User photos are globally accessible.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /users/{userId}/files/{fileId}: Files uploaded by each user, only accessible by that user.
 * - /projects/{projectId}: Projects accessible to all authenticated users.
 * - /projects/{projectId}/comments/{commentId}: Comments on projects, accessible by all authenticated users.
 * - /labels/{labelId}: Global labels, accessible to all authenticated users.
 * - /chatMessages/{messageId}: Chat messages, accessible to all authenticated users.
 * - /userPhotos/{photoId}: User photos, accessible by all.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication.
 * - Data validation is minimal to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - User-specific data is nested under the /users/{userId} path, allowing for simple isOwner(userId) checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects all documents in the database.
     * @path /databases/{database}/documents
     * @allow (read) - Any authenticated user can read any document.
     * @deny (write) - No one can write directly to the root.
     * @principle Root match is a container only.
     */
    match /{document=**} {
      allow read: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user profiles, ensuring users can only access their own profile.
     * @path /users/{userId}
     * @allow (create) - User jUbCg2kaLDMbJRcWAQ7iUjqvKvS2 can create their profile if request.auth.uid == userId.
     * @allow (get, update, delete) - User jUbCg2kaLDMbJRcWAQ7iUjqvKvS2 can get, update, and delete their own profile.
     * @deny (create) - User abc cannot create a profile for user jUbCg2kaLDMbJRcWAQ7iUjqvKvS2 (mismatched userId).
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages files uploaded by users, ensuring users can only access their own files.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) - User jUbCg2kaLDMbJRcWAQ7iUjqvKvS2 can create a file under their profile.
     * @allow (get, update, delete) - User jUbCg2kaLDMbJRcWAQ7iUjqvKvS2 can get, update, and delete their own files.
     * @deny (create) - User abc cannot create a file for user jUbCg2kaLDMbJRcWAQ7iUjqvKvS2 (mismatched userId).
     * @principle Enforces document ownership for writes on subcollections.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages projects, accessible by all authenticated users.
     * @path /projects/{projectId}
     * @allow (get, list) - Any authenticated user can read projects.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete projects.
     * @principle Allows public read access with authentication required for writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages comments for projects, accessible by all authenticated users.
     * @path /projects/{projectId}/comments/{commentId}
     * @allow (get, list) - Any authenticated user can read comments on projects.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete comments.
     * @principle Allows public read access with authentication required for writes on subcollections.
     */
    match /projects/{projectId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages global labels, accessible by all authenticated users.
     * @path /labels/{labelId}
     * @allow (get, list) - Any authenticated user can read labels.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete labels.
     * @principle Allows public read access with authentication required for writes.
     */
    match /labels/{labelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages chat messages, accessible to all authenticated users.
     * @path /chatMessages/{messageId}
     * @allow (get, list) - Any authenticated user can read chat messages.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete chat messages.
     * @principle Allows public read access with authentication required for writes.
     */
    match /chatMessages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

      /**
       * @description Manages user photos, accessible by all.
       * @path /userPhotos/{photoId}
       * @allow (get, list) - Any user can view photos.
       * @allow (create, update, delete) - Only authenticated users can upload, modify or delete photos.
       */
      match /userPhotos/{photoId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
      }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of an existing document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}