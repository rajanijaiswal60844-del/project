/**
 * @fileoverview Firestore Security Rules for FaceFilter AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data, including profile information, uploaded files,
 * created projects, custom labels, and chat messages. Listing all users is
 * disallowed.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring a clear separation of
 * user data.
 *
 * Key Security Decisions:
 * - Listing all users is disallowed to prevent information harvesting.
 * - All write operations (create, update, delete) are strictly limited to
 *   the authenticated user, verified by matching `request.auth.uid` to the
 *   `userId` in the path.
 * - Read operations (`get`, `list`) on user-owned resources are allowed only
 *   if the `request.auth.uid` matches the `userId` in the path.
 * - Denormalization for Authorization: To simplify rules and improve
 *   performance, authorization checks are performed directly on the document
 *   being accessed. For example, instead of querying a separate collection
 *   to check ownership, the rules verify that the `userId` in the path
 *   matches the authenticated user's `uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own profile.
     * @allow (get) User with matching ID can read their profile.
     * @allow (update) User with matching ID can update their profile.
     * @allow (delete) User with matching ID can delete their profile.
     * @deny (create) User cannot create another user's profile.
     * @deny (get) User cannot read another user's profile.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/files/{fileId} collection.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User can create a file under their own user ID.
     * @allow (get) User can get a file under their own user ID.
     * @allow (update) User can update a file under their own user ID.
     * @allow (delete) User can delete a file under their own user ID.
     * @deny (create) User cannot create a file under another user ID.
     * @deny (get) User cannot get a file under another user ID.
     * @deny (update) User cannot update a file under another user ID.
     * @deny (delete) User cannot delete a file under another user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/projects/{projectId} collection.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User can create a project under their own user ID.
     * @allow (get) User can get a project under their own user ID.
     * @allow (update) User can update a project under their own user ID.
     * @allow (delete) User can delete a project under their own user ID.
     * @deny (create) User cannot create a project under another user ID.
     * @deny (get) User cannot get a project under another user ID.
     * @deny (update) User cannot update a project under another user ID.
     * @deny (delete) User cannot delete a project under another user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/projects/{projectId}/comments/{commentId} collection.
     * @path /users/{userId}/projects/{projectId}/comments/{commentId}
     * @allow (create) User can create a comment under their own project.
     * @allow (get) User can get a comment under their own project.
     * @allow (update) User can update a comment under their own project.
     * @allow (delete) User can delete a comment under their own project.
     * @deny (create) User cannot create a comment under another user's project.
     * @deny (get) User cannot get a comment under another user's project.
     * @deny (update) User cannot update a comment under another user's project.
     * @deny (delete) User cannot delete a comment under another user's project.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId}/comments/{commentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/labels/{labelId} collection.
     * @path /users/{userId}/labels/{labelId}
     * @allow (create) User can create a label under their own user ID.
     * @allow (get) User can get a label under their own user ID.
     * @allow (update) User can update a label under their own user ID.
     * @allow (delete) User can delete a label under their own user ID.
     * @deny (create) User cannot create a label under another user ID.
     * @deny (get) User cannot get a label under another user ID.
     * @deny (update) User cannot update a label under another user ID.
     * @deny (delete) User cannot delete a label under another user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/labels/{labelId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/chatMessages/{messageId} collection.
     * @path /users/{userId}/chatMessages/{messageId}
     * @allow (create) User can create a chat message under their own user ID.
     * @allow (get) User can get a chat message under their own user ID.
     * @allow (update) User can update a chat message under their own user ID.
     * @allow (delete) User can delete a chat message under their own user ID.
     * @deny (create) User cannot create a chat message under another user ID.
     * @deny (get) User cannot get a chat message under another user ID.
     * @deny (update) User cannot update a chat message under another user ID.
     * @deny (delete) User cannot delete a chat message under another user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/chatMessages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}