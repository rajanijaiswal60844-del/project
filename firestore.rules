/**
 * @fileoverview Firestore Security Rules for FaceFilter AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated files.
 * Projects, Labels, and Tasks are managed at a higher level, presumably by administrators.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only by the user with matching UID.
 * - /users/{userId}/files/{fileId}: Stores files uploaded by each user. Accessible only by the user with matching UID.
 * - /projects/{projectId}: Stores project information. Access is not explicitly defined in the provided reasoning, defaulting to no access.
 * - /labels/{labelId}: Stores label information. Access is not explicitly defined in the provided reasoning, defaulting to no access.
 * - /projects/{projectId}/tasks/{taskId}: Stores task information. Access is not explicitly defined in the provided reasoning, defaulting to no access.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied because there is no `allow list` rule on the `/users` collection.
 * - Project, Label, and Task collections default to no access for all operations. These should be modified later if admin access is required.
 * - All write operations require a verified, authenticated user (`request.auth != null`).
 *
 * Denormalization for Authorization:
 * - The `userId` is part of the path for user files, making authorization straightforward without requiring document reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123' if authenticated as 'user123'.
     * @allow (get) User 'user123' can read their own profile if authenticated as 'user123'.
     * @deny (get) User 'user456' cannot read user 'user123's profile if authenticated as 'user456'.
     * @allow (update) User 'user123' can update their own profile if authenticated as 'user123'.
     * @deny (update) User 'user456' cannot update user 'user123's profile if authenticated as 'user456'.
     * @allow (delete) User 'user123' can delete their own profile if authenticated as 'user123'.
     * @deny (delete) User 'user456' cannot delete user 'user123's profile if authenticated as 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own files.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User 'user123' can create a file under their profile if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create a file under user 'user123's profile if authenticated as 'user456'.
     * @allow (get) User 'user123' can read their own file if authenticated as 'user123'.
     * @deny (get) User 'user456' cannot read a file under user 'user123's profile if authenticated as 'user456'.
     * @allow (update) User 'user123' can update their own file if authenticated as 'user123'.
     * @deny (update) User 'user456' cannot update a file under user 'user123's profile if authenticated as 'user456'.
     * @allow (delete) User 'user123' can delete their own file if authenticated as 'user123'.
     * @deny (delete) User 'user456' cannot delete a file under user 'user123's profile if authenticated as 'user456'.
     * @principle Enforces document ownership for all operations within the user's file storage.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to project data.  No access granted without further rules.
     * @path /projects/{projectId}
     * @allow (create) No one can create a project by default.
     * @deny (create) Any authenticated user cannot create a project.
     * @allow (get) No one can read a project by default.
     * @deny (get) Any authenticated user cannot read a project.
     * @allow (update) No one can update a project by default.
     * @deny (update) Any authenticated user cannot update a project.
     * @allow (delete) No one can delete a project by default.
     * @deny (delete) Any authenticated user cannot delete a project.
     * @principle Restricts access to this collection by default.
     */
    match /projects/{projectId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to label data. No access granted without further rules.
     * @path /labels/{labelId}
     * @allow (create) No one can create a label by default.
     * @deny (create) Any authenticated user cannot create a label.
     * @allow (get) No one can read a label by default.
     * @deny (get) Any authenticated user cannot read a label.
     * @allow (update) No one can update a label by default.
     * @deny (update) Any authenticated user cannot update a label.
     * @allow (delete) No one can delete a label by default.
     * @deny (delete) Any authenticated user cannot delete a label.
     * @principle Restricts access to this collection by default.
     */
    match /labels/{labelId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to task data. No access granted without further rules.
     * @path /projects/{projectId}/tasks/{taskId}
     * @allow (create) No one can create a task by default.
     * @deny (create) Any authenticated user cannot create a task.
     * @allow (get) No one can read a task by default.
     * @deny (get) Any authenticated user cannot read a task.
     * @allow (update) No one can update a task by default.
     * @deny (update) Any authenticated user cannot update a task.
     * @allow (delete) No one can delete a task by default.
     * @deny (delete) Any authenticated user cannot delete a task.
     * @principle Restricts access to this collection by default.
     */
    match /projects/{projectId}/tasks/{taskId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}