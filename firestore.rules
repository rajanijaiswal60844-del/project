/**
 * @file Firebase Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and their associated files.
 * Projects, labels, chat messages, and user photos are publicly readable but only modifiable under specific conditions.
 *
 * @dataStructure
 * - /users/{userId}: User profiles, accessible only by the authenticated user.
 * - /users/{userId}/files/{fileId}: Files uploaded by a specific user, accessible only by that user.
 * - /projects/{projectId}: Projects, publicly readable.
 * - /projects/{projectId}/comments/{commentId}: Comments for projects, publicly readable.
 * - /labels/{labelId}: Labels, publicly readable.
 * - /chatMessages/{messageId}: Chat messages, publicly readable.
 * - /userPhotos/{photoId}: User photos, publicly readable.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own profiles and files.
 * - Listing of user documents is forbidden to prevent enumeration.
 * - Projects, labels, and chat messages are publicly readable, but creation, updates, and deletion are open.
 * - User Photos are publicly readable.
 *
 * @denormalizationForAuthorization N/A
 *
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if the authenticated user's ID matches the 'userId' path segment.
     * @deny (create, update, get, delete) if the authenticated user's ID does not match the 'userId' path segment.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to files uploaded by a user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create, update, get, delete) if the authenticated user's ID matches the 'userId' path segment.
     * @deny (create, update, get, delete) if the authenticated user's ID does not match the 'userId' path segment.
     * @principle Restricts access to a user's own files.
     */
    match /users/{userId}/files/{fileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to projects.
     * @path /projects/{projectId}
     * @allow get, list: Publicly accessible.
     * @allow create, update, delete: open.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if true; // TODO: Add more restrictive rules.
    }

    /**
     * @description Controls access to comments for a specific project.
     * @path /projects/{projectId}/comments/{commentId}
     * @allow get, list: Publicly accessible.
     */
    match /projects/{projectId}/comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if true; // TODO: Add more restrictive rules.
    }

    /**
     * @description Controls access to global labels.
     * @path /labels/{labelId}
     * @allow get, list: Publicly accessible.
     */
    match /labels/{labelId} {
      allow get, list: if true;
       allow create, update, delete: if true; // TODO: Add more restrictive rules.
    }

    /**
     * @description Controls access to global chat messages.
     * @path /chatMessages/{messageId}
     * @allow get, list: Publicly accessible.
     */
    match /chatMessages/{messageId} {
      allow get, list: if true;
       allow create, update, delete: if true; // TODO: Add more restrictive rules.
    }

    /**
     * @description Controls access to user photos (for admin viewing).
     * @path /userPhotos/{photoId}
     * @allow get, list: Publicly accessible.
     */
    match /userPhotos/{photoId} {
      allow get, list: if true;
       allow create, update, delete: if true; // TODO: Add more restrictive rules.
    }
  }
}