/**
 * @fileOverview Firestore Security Rules for FaceFilter AI application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection and enforces a strict
 * ownership model for user profiles and their associated files. Projects,
 * labels, comments, and chat messages are publicly readable but writes are not secured in this prototype version.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user.
 * - /users/{userId}/files/{fileId}: Files uploaded by the user, accessible only by the user.
 * - /projects/{projectId}: Project data, publicly readable.
 * - /projects/{projectId}/comments/{commentId}: Comments on projects, publicly readable.
 * - /labels/{labelId}: Labels for projects, publicly readable.
 * - /chatMessages/{messageId}: Chat messages, publicly readable.
 *
 * Key Security Decisions:
 * - User profiles and uploaded files are strictly private and accessible only to the owning user.
 * - Listing of all users is disallowed for privacy.
 * - All other data is readable by any authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, or delete their profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete the profile for 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures files uploaded by users. Only the authenticated user can access their own files.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) - User with ID 'user123' can create a file in their 'files' collection.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, or delete a file in their 'files' collection.
     * @deny (create) - User with ID 'user456' cannot create a file in 'user123's 'files' collection.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete a file in 'user123's 'files' collection.
     * @principle Enforces document ownership for all operations on user files.
     */
    match /users/{userId}/files/{fileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows any authenticated user to read projects. Writes are not authorized in this prototype.
     * @path /projects/{projectId}
     * @allow (get, list) - Any authenticated user can read project data.
     * @deny (create, update, delete) - No one is authorized to write project data in this prototype.
     * @principle Public read, owner-only writes (NOT YET IMPLEMENTED - requires an ownerId field).
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows any authenticated user to read comments. Writes are not authorized in this prototype.
      * @path /projects/{projectId}/comments/{commentId}
      * @allow (get, list) - Any authenticated user can read comment data.
      * @deny (create, update, delete) - No one is authorized to write comment data in this prototype.
      * @principle Public read, owner-only writes (NOT YET IMPLEMENTED - requires an ownerId field).
      */
    match /projects/{projectId}/comments/{commentId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows any authenticated user to read labels. Writes are not authorized in this prototype.
     * @path /labels/{labelId}
     * @allow (get, list) - Any authenticated user can read label data.
     * @deny (create, update, delete) - No one is authorized to write label data in this prototype.
     * @principle Public read, owner-only writes (NOT YET IMPLEMENTED - requires an ownerId field).
     */
    match /labels/{labelId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows any authenticated user to read chat messages. Writes are not authorized in this prototype.
     * @path /chatMessages/{messageId}
     * @allow (get, list) - Any authenticated user can read chat message data.
     * @deny (create, update, delete) - No one is authorized to write chat message data in this prototype.
     * @principle Public read, owner-only writes (NOT YET IMPLEMENTED - requires an ownerId field).
     */
    match /chatMessages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}