/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to projects, labels, chat messages, and subcollections.
 * It uses denormalization to avoid costly `get()` calls in rules.
 *
 * @dataStructure
 * - `/users/{userId}`: User profile data, accessible only by the user.
 * - `/users/{userId}/files/{fileId}`: Files uploaded by the user, accessible only by the user.
 * - `/projects/{projectId}`: Project data, publicly readable, writable by anyone.
 * - `/projects/{projectId}/comments/{commentId}`: Comments for projects, publicly readable, writable by anyone.
 * - `/labels/{labelId}`: Labels, publicly readable, writable by anyone.
 * - `/chatMessages/{messageId}`: Chat messages, publicly readable, writable by anyone.
 * - `/userPhotos/{photoId}`: User uploaded photos.
 *
 * @keySecurityDecisions
 * - Users can only access their own data under `/users/{userId}`.
 * - Listing of users is disallowed for privacy.
 * - Read access is public for projects, labels, chat messages, and comments.
 *
 * @denormalizationForAuthorization
 * - For `/users/{userId}`, the `id` field within the document MUST match the `userId` in the path.
 *   This avoids needing a separate lookup to verify ownership.
 * - The `userPhotos` collection requires the `userId` in the path to match the `userId` field in the document.
 *
 * @structuralSegregation
 * - Private user data is stored under `/users/{userId}`, while public data (projects, labels)
 *   is stored in top-level collections. This simplifies list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID matching the `userId` can create their profile.
     * @allow (get, list) - Authenticated user with UID matching `userId` can read their profile.
     * @allow (update, delete) - Authenticated user with UID matching `userId` can update or delete their profile.
     * @deny (get, list) - Any other user cannot get or list any profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for files uploaded by the user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) - Authenticated user with UID matching the `userId` can create a file.
     * @allow (get, list) - Authenticated user with UID matching `userId` can read their files.
     * @allow (update, delete) - Authenticated user with UID matching `userId` can update or delete their files.
     * @deny (get, list) - Any other user cannot get or list the files.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/files/{fileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access and authenticated writes to projects.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read projects.
     * @allow (create) - Any authenticated user can create projects.
     * @allow (update, delete) - Any authenticated user can update/delete projects.
     * @deny (get, list) - Non signed in users cannot create projects.
     * @principle Public read, authenticated write.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access and authenticated writes to project comments.
     * @path /projects/{projectId}/comments/{commentId}
     * @allow (get, list) - Any user can read project comments.
     * @allow (create) - Any authenticated user can create project comments.
     * @allow (update, delete) - Any authenticated user can update/delete project comments.
     * @deny (get, list) - Non signed in users cannot create project comments.
     * @principle Public read, authenticated write.
     */
    match /projects/{projectId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access and authenticated writes to labels.
     * @path /labels/{labelId}
     * @allow (get, list) - Any user can read labels.
     * @allow (create) - Any authenticated user can create labels.
     * @allow (update, delete) - Any authenticated user can update/delete labels.
     * @deny (get, list) - Non signed in users cannot create labels.
     * @principle Public read, authenticated write.
     */
    match /labels/{labelId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access and authenticated writes to chat messages.
     * @path /chatMessages/{messageId}
     * @allow (get, list) - Any user can read chat messages.
     * @allow (create) - Any authenticated user can create chat messages.
     * @allow (update, delete) - Any authenticated user can update/delete chat messages.
     * @deny (get, list) - Non signed in users cannot create chat messages.
     * @principle Public read, authenticated write.
     */
    match /chatMessages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows global read and write access to user photos. The 'userId' field in the data has to match the auth's uid.
     * @path /userPhotos/{photoId}
     * @allow (get, list) - Any user can read user photos.
     * @allow (create) - Any authenticated user can create user photos.
     * @allow (update, delete) - Any authenticated user can update/delete user photos.
     * @deny (get, list) - Non signed in users cannot create user photos.
     * @principle Public read, authenticated write.
     */
    match /userPhotos/{photoId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource != null;
      allow delete: if isSignedIn() && request.resource != null;
    }
  }
}