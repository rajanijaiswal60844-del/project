/**
 * @fileoverview Firestore Security Rules for FaceFilter AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Every data element is nested under
 * `/users/{userId}` and is only accessible to the authenticated user matching that ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, segregating data by user.  This includes user profiles,
 * uploaded files, projects, labels, comments, and chat messages.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication.
 * - Data validation is minimal in this prototyping phase. Focus is on authorization.
 *
 * Denormalization for Authorization:
 *  - The rules assume that all documents nested under `/users/{userId}` have an implicit `ownerId`
 *    that matches the `userId` segment in the path. This is enforced during creation and update to
 *    prevent inconsistencies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the `id` field matches the `userId` in the path during creation.
     */
    function isValidOwnerIdOnCreate(userId) {
      return request.resource.data.id == userId;
    }

    /**
     * @description Enforces that the `id` field is immutable and matches the `userId` in the path during updates.
     */
    function isValidOwnerIdOnUpdate(userId) {
      return request.resource.data.id == resource.data.id && resource.data.id == userId;
    }

    /**
     * @description
     * Allows access to user profiles only to the authenticated user.
     *
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && isValidOwnerIdOnCreate(userId);
      allow update: if isExistingOwner(userId) && isValidOwnerIdOnUpdate(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Allows a user to manage their uploaded files.
     *
     * @path /users/{userId}/files/{fileId}
     * @allow (get) User with ID 'user123' can read their own file with ID 'file456'.
     * @allow (create) User with ID 'user123' can create a file.
     * @allow (update) User with ID 'user123' can update their own file with ID 'file456'.
     * @allow (delete) User with ID 'user123' can delete their own file with ID 'file456'.
     * @deny (get) User with ID 'user456' cannot read a file of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a file for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update a file of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a file of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Allows a user to manage their projects.
     *
     * @path /users/{userId}/projects/{projectId}
     * @allow (get) User with ID 'user123' can read their project with ID 'project456'.
     * @allow (create) User with ID 'user123' can create a project.
     * @allow (update) User with ID 'user123' can update their project with ID 'project456'.
     * @allow (delete) User with ID 'user123' can delete their project with ID 'project456'.
     * @deny (get) User with ID 'user456' cannot read a project of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a project for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update a project of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a project of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Allows a user to manage comments on their projects.
     *
     * @path /users/{userId}/projects/{projectId}/comments/{commentId}
     * @allow (get) User with ID 'user123' can read a comment on their project.
     * @allow (create) User with ID 'user123' can create a comment on their project.
     * @allow (update) User with ID 'user123' can update a comment on their project.
     * @allow (delete) User with ID 'user123' can delete a comment on their project.
     * @deny (get) User with ID 'user456' cannot read a comment on a project of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a comment on a project of user 'user123'.
     * @deny (update) User with ID 'user456' cannot update a comment on a project of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a comment on a project of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId}/comments/{commentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Allows a user to manage their custom labels.
     *
     * @path /users/{userId}/labels/{labelId}
     * @allow (get) User with ID 'user123' can read their label with ID 'label456'.
     * @allow (list) User with ID 'user123' can list their labels.
     * @allow (create) User with ID 'user123' can create a label.
     * @allow (update) User with ID 'user123' can update their label with ID 'label456'.
     * @allow (delete) User with ID 'user123' can delete their label with ID 'label456'.
     * @deny (get) User with ID 'user456' cannot read a label of user 'user123'.
     * @deny (list) User with ID 'user456' cannot list labels of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a label for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update a label of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a label of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/labels/{labelId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description
      * Allows a user to manage their chat messages.
      *
      * @path /users/{userId}/chatMessages/{messageId}
      * @allow (get) User with ID 'user123' can read their chat message with ID 'message456'.
      * @allow (list) User with ID 'user123' can list their chat messages.
      * @allow (create) User with ID 'user123' can create a chat message.
      * @allow (update) User with ID 'user123' can update their chat message with ID 'message456'.
      * @allow (delete) User with ID 'user123' can delete their chat message with ID 'message456'.
      * @deny (get) User with ID 'user456' cannot read a chat message of user 'user123'.
      * @deny (list) User with ID 'user456' cannot list chat messages of user 'user123'.
      * @deny (create) User with ID 'user456' cannot create a chat message for user 'user123'.
      * @deny (update) User with ID 'user456' cannot update a chat message of user 'user123'.
      * @deny (delete) User with ID 'user456' cannot delete a chat message of user 'user123'.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/chatMessages/{messageId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}