/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a security model based on user ownership and public read access where applicable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only accessible by the authenticated user.
 * - /users/{userId}/files/{fileId}: Stores files uploaded by a user; only accessible by the authenticated user.
 * - /projects/{projectId}: Stores project data; publicly readable, writable by any authenticated user.
 * - /projects/{projectId}/comments/{commentId}: Stores comments for a specific project; publicly readable, writable by any authenticated user.
 * - /labels/{labelId}: Stores global labels; publicly readable, writable by any authenticated user.
 * - /chatMessages/{messageId}: Stores chat messages; publicly readable, writable by any authenticated user.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId} and its subcollections.
 * - Project, label, and chat message data is publicly readable.
 * - No data type validation is performed (prototyping mode).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) Authenticated user 'user123' accesses their own profile.
     *   - request.auth.uid: 'user123'
     *   - resource.data.id: 'user123'
     * @deny (create) User 'user456' tries to create a profile for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (get, update, delete) User 'user456' tries to access 'user123's profile.
     *   - request.auth.uid: 'user456'
     *   - resource.data.id: 'user123'
     * @principle Enforces document ownership for user profiles; users can only manage their own profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user files.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User 'user123' creates a new file.
     *   - request.auth.uid: 'user123'
     * @allow (get, list, update, delete) User 'user123' accesses their own file.
     *   - request.auth.uid: 'user123'
     * @deny (create, get, list, update, delete) User 'user456' tries to access 'user123's file.
     *   - request.auth.uid: 'user456'
     * @principle Restricts access to a user's own data tree; users can only manage their own files.
     */
    match /users/{userId}/files/{fileId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to projects.
     * @path /projects/{projectId}
     * @allow (get, list) Any authenticated user can read projects.
     *   - request.auth.uid: 'user123'
     * @allow (create) Any authenticated user can create projects.
     *   - request.auth.uid: 'user123'
     * @allow (update, delete) Any authenticated user can update or delete projects.
     *   - request.auth.uid: 'user123'
     * @principle Publicly readable collection; any authenticated user can write.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource != null;
      allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Controls access to comments for projects.
     * @path /projects/{projectId}/comments/{commentId}
     * @allow (get, list) Any authenticated user can read comments.
     *   - request.auth.uid: 'user123'
     * @allow (create) Any authenticated user can create comments.
     *   - request.auth.uid: 'user123'
     * @allow (update, delete) Any authenticated user can update or delete comments.
     *   - request.auth.uid: 'user123'
     * @principle Publicly readable collection; any authenticated user can write.
     */
    match /projects/{projectId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource != null;
      allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Controls access to labels.
     * @path /labels/{labelId}
     * @allow (get, list) Any authenticated user can read labels.
     *   - request.auth.uid: 'user123'
     * @allow (create) Any authenticated user can create labels.
     *   - request.auth.uid: 'user123'
     * @allow (update, delete) Any authenticated user can update or delete labels.
     *   - request.auth.uid: 'user123'
     * @principle Publicly readable collection; any authenticated user can write.
     */
    match /labels/{labelId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource != null;
      allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Controls access to chat messages.
     * @path /chatMessages/{messageId}
     * @allow (get, list) Any authenticated user can read chat messages.
     *   - request.auth.uid: 'user123'
     * @allow (create) Any authenticated user can create chat messages.
     *   - request.auth.uid: 'user123'
     * @allow (update, delete) Any authenticated user can update or delete chat messages.
     *   - request.auth.uid: 'user123'
     * @principle Publicly readable collection; any authenticated user can write.
     */
    match /chatMessages/{messageId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource != null;
      allow delete: if request.auth != null && resource != null;
    }
  }
}